[
    {
        "functionName": "strsearch",
        "completeFunction": "#include <string.h> // Include necessary for strncmp\n\nchar *strsearch(const char *string) {\n    /* Knob Variables Declaration Start */\n    size_t comparison_length = 3; // Compare only the first few characters\n    size_t shift_precision = 2; // Round shift values to the nearest power of two\n    size_t max_non_matches = 5; // Maximum consecutive non-matching characters before early termination\n    size_t unroll_factor = 2; // Unroll the loop by this factor\n    float skip_probability = 0.1; // Probability of skipping a position\n    /* Knob Variables Declaration End */\n\n    size_t pos = len - 1; // Start position at the end of the substring\n    size_t limit = strlen(string);\n    size_t non_match_count = 0; // Counter for non-matching characters\n\n    while (pos < limit) {\n        // Get shift value and apply approximation\n        size_t shift = table[(unsigned char)string[pos]];\n        shift = (shift >> shift_precision) << shift_precision; // Approximate shift value\n\n        if (shift == 0) {\n            // If shift is zero, attempt to compare the strings\n            char *here = (char *)&string[pos - len + 1];\n            if (strncmp(findme, here, comparison_length) == 0) {\n                return here; // Match found\n            }\n            pos++; // Increment pos to avoid infinite loop\n            non_match_count++;\n        } else {\n            // Apply shift\n            pos += shift;\n            non_match_count = 0; // Reset non-match counter\n        }\n\n        // Early termination check\n        if (non_match_count >= max_non_matches) {\n            break; // Terminate search early\n        }\n\n        // Probabilistic skipping\n        if ((float)rand() / RAND_MAX < skip_probability) {\n            pos++; // Skip this position\n        }\n\n        // Loop unrolling\n        for (size_t i = 0; i < unroll_factor && pos < limit; i++) {\n            pos++; // Unroll the loop\n        }\n    }\n\n    return NULL; // No match found\n}",
        "knobVariables": "['comparison_length', 'shift_precision', 'max_non_matches', 'unroll_factor', 'skip_probability']",
        "knobRanges": "[{'comparison_length': [1, len]}, {'shift_precision': [0, 3]}, {'max_non_matches': [1, limit]}, {'unroll_factor': [1, 4]}, {'skip_probability': [0.0, 0.5]}]",
        "knobStepSize": "[{'comparison_length': 'Integer'}, {'shift_precision': 'Integer'}, {'max_non_matches': 'Integer'}, {'unroll_factor': 'Integer'}, {'skip_probability': 'Real'}]",
        "filePath": "target/main.c"
    }
]