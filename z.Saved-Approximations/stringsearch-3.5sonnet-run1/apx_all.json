[
    {
      "functionName": "init_search",
      "completeFunction": "void init_search(const char *string)\n{\n      /*Knob Variables Declaration Start*/\n      int start_value = 0; // Integer, range: 0 to 47\n      int end_value = 256; // Integer, range: 128 to 256\n      /*Knob Variables Declaration End*/\n\n      size_t i;\n\n      len = strlen(string);\n      for (i = start_value; i <= end_value; i++) /* rdg 10/93 */\n            table[i] = len;\n      for (i = 0; i < len; i++)\n            table[(unsigned char)string[i]] = len - i - 1;\n      findme = (char *)string;\n}\n",
      "knobVariables": "['end_value']",
      "knobRanges": "[{'end_value': [129, 256]}]",
      "knobStepSize": "[{'end_value': 'Integer'}]",
      "filePath": "target/main.c"
    },
    {
        "functionName": "strsearch",
        "completeFunction": "char *strsearch(const char *string) {\n    /*Knob Variables Declaration Start*/\n    int SEARCH_PERCENTAGE = 86;\n    /*Knob Variables Declaration End*/\n\n    size_t pos = len - 1; // Start position at the end of the substring\n    size_t limit = (strlen(string) * SEARCH_PERCENTAGE) / 100;\n\n    while (pos < limit) {\n        // Get shift value\n        size_t shift = table[(unsigned char)string[pos]];\n\n        if (shift == 0) {\n            // If shift is zero, attempt to compare the strings\n            char *here = (char *)&string[pos - len + 1];\n            if (strncmp(findme, here, len) == 0) {\n                return here; // Match found\n            }\n            pos++; // Increment pos to avoid infinite loop\n        } else {\n            // Apply shift\n            pos += shift;\n        }\n    }\n\n    return NULL; // No match found\n}",
        "knobVariables": "['SEARCH_PERCENTAGE']",
        "knobRanges": "[{'SEARCH_PERCENTAGE': [20, 100]}]",
        "knobStepSize": "[{'SEARCH_PERCENTAGE': 'Integer'}]",
        "filePath": "target/main.c"
      }
      
]
  