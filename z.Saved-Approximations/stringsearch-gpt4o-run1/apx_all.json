[
    {
        "functionName": "init_search",
        "completeFunction": "#include <string.h>  // Include necessary library for strlen\n\nvoid init_search(const char *string)\n{\n    size_t i;\n\n    /* Knob Variables Declaration Start */\n    size_t char_range = 255;\n    float shift_factor = 0.9999999999999999;\n    size_t length_rounding = 7;\n    /* Knob Variables Declaration End */\n\n    // Approximate string length calculation by rounding\n    len = (strlen(string) + length_rounding - 1) & ~(length_rounding - 1);\n\n    // Approximate table initialization by reducing range\n    for (i = 0; i <= char_range; i++)\n        table[i] = len;\n\n    // Approximate shift value calculation\n    for (i = 0; i < len; i++)\n        table[(unsigned char)string[i]] = (len - i - 1) * shift_factor;\n\n    findme = (char *)string;\n}",
        "knobVariables": "['char_range', 'shift_factor', 'length_rounding']",
        "knobRanges": "[{'char_range': [64, 256]}, {'shift_factor': [0.5, 1.0]}, {'length_rounding': [1, 8]}]",
        "knobStepSize": "[{'char_range': 'Integer'}, {'shift_factor': 'Real'}, {'length_rounding': 'Integer'}]",
        "filePath": "target/main.c"
    },
    {
        "functionName": "strsearch",
        "completeFunction": "#include <string.h> // Required for strncmp\n\nchar *strsearch(const char *string) {\n    /* Knob Variables Declaration Start */\n    int char_comparison_knob = 3; // Number of characters to compare in strncmp\n    int loop_step_size_knob = 1;  // Step size for pos increments\n    /* Knob Variables Declaration End */\n\n    size_t pos = len - 1; // Start position at the end of the substring\n    size_t limit = strlen(string);\n\n    while (pos < limit) {\n        // Get shift value\n        size_t shift = table[(unsigned char)string[pos]];\n\n        if (shift == 0) {\n            // If shift is zero, attempt to compare the strings\n            char *here = (char *)&string[pos - len + 1];\n            // Approximate strncmp by comparing only a subset of characters\n            if (strncmp(findme, here, char_comparison_knob) == 0) {\n                return here; // Match found\n            }\n            pos += loop_step_size_knob; // Increment pos to avoid infinite loop\n        } else {\n            // Apply shift\n            pos += shift;\n        }\n    }\n\n    return NULL; // No match found\n}",
        "knobVariables": "['char_comparison_knob', 'loop_step_size_knob']",
        "knobRanges": "[{'char_comparison_knob': [1, 100]}, {'loop_step_size_knob': [1, 3]}]",
        "knobStepSize": "[{'char_comparison_knob': 'Integer'}, {'loop_step_size_knob': 'Integer'}]",
        "filePath": "target/main.c"
    }
]