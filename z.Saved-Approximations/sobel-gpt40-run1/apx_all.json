[
    {
      "functionName": "sobel_filtering",
      "completeFunction": "void sobel_filtering()\n{\n  /* Knob Variables Declaration Start */\n  int bit_shift = 3;\n  int min_value = -1020;\n  int max_value = 1020;\n/* Knob Variables Declaration End */\n  \n  // Standard Sobel filter weights (no approximation)\n  int weight[3][3] = {\n    { -1,  0,  1 },\n    { -2,  0,  2 },\n    { -1,  0,  1 }\n  };\n\n  // Clamping values (static)\n  int min_clamp = 0;\n  int max_clamp = 255;\n\n  /* Initialize output image dimensions */\n  x_size2 = x_size1;\n  y_size2 = y_size1;\n\n  /* Apply Sobel filter and generate image2 */\n  for (int y = 1; y < y_size1 - 1; y++) {\n    for (int x = 1; x < x_size1 - 1; x++) {\n      int pixel_value = 0;\n\n      // Convolution with Sobel filter\n      for (int j = -1; j <= 1; j++) {\n        for (int i = -1; i <= 1; i++) {\n          pixel_value += weight[j + 1][i + 1] * image1[y + j][x + i];\n        }\n      }\n\n      /* Normalize pixel_value to the range 0..255 using the selected bit shift */\n      int normalized_value = (pixel_value - min_value) >> bit_shift;\n\n      /* Clamp the value to the static 0-255 range */\n      if (normalized_value < min_clamp) normalized_value = min_clamp;\n      if (normalized_value > max_clamp) normalized_value = max_clamp;\n\n      /* Set the value in the output image */\n      image2[y][x] = (unsigned char)normalized_value;\n    }\n  }\n}",
      "knobVariables": "['bit_shift', 'min_value', 'max_value']",
      "knobRanges": "[{'bit_shift': [2, 5]}, {'min_value': [-2040, -510]}, {'max_value': [510, 2040]}]",
      "knobStepSize": "[{'bit_shift': 'Integer'}, {'min_value': 'Integer'}, {'max_value': 'Integer'}]",
      "filePath": "target/sobel.c"
    }
]