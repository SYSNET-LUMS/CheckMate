[
    {
        "functionName": "calculateDeliveryRatio",
        "completeFunction": "#include <stdint.h> // Include for fixed-point arithmetic support\n\ndouble calculateDeliveryRatio(PacketLog logs[], int size)\n{\n    /* Knob Variables Declaration Start */\n    int fixed_point_precision = 4095;\n    int loop_unroll_factor = 3;\n    int early_exit_threshold = 9;\n    int weight_granularity = 9;\n    /* Knob Variables Declaration End */\n\n    int total_packets_fixed = 0;\n    int delivered_weight_fixed = 0;\n\n    // Loop unrolling with approximation\n    for (int i = 0; i < size; i += loop_unroll_factor)\n    {\n        for (int j = 0; j < loop_unroll_factor && (i + j) < size; j++)\n        {\n            total_packets_fixed += fixed_point_precision;\n            if (logs[i + j].status == 1)\n            {\n                // Approximate weight calculation\n                delivered_weight_fixed += ((int)(logs[i + j].weight * fixed_point_precision / weight_granularity)) * weight_granularity;\n            }\n        }\n\n        // Early loop exit condition based on change in delivery ratio\n        if (i > 0 && ((double)delivered_weight_fixed / total_packets_fixed) - ((double)(delivered_weight_fixed - weight_granularity) / (total_packets_fixed - fixed_point_precision)) < early_exit_threshold * 0.01)\n        {\n            break;\n        }\n    }\n\n    // Fixed-point division approximation\n    return (double)delivered_weight_fixed / total_packets_fixed;\n}",
        "knobVariables": "['fixed_point_precision', 'loop_unroll_factor', 'early_exit_threshold', 'weight_granularity']",
        "knobRanges": "[{'fixed_point_precision': [256, 4096]}, {'loop_unroll_factor': [1, 4]}, {'early_exit_threshold': [1, 10]}, {'weight_granularity': [1, 10]}]",
        "knobStepSize": "[{'fixed_point_precision': 'Integer'}, {'loop_unroll_factor': 'Integer'}, {'early_exit_threshold': 'Integer'}, {'weight_granularity': 'Integer'}]",
        "filePath": "target/main.c"
    }
]