[
    {
        "functionName": "classify",
        "completeFunction": "#include <stdint.h> // For fixed-width integer types\n\nstatic class_t classify(features_t *features, model_t *model) {\n    /* Knob Variables Declaration Start */\n    uint8_t error_threshold = 10; // Threshold for counting errors\n    uint8_t loop_truncation_factor = 80; // Percentage of loop iterations to perform\n    /* Knob Variables Declaration End */\n\n    int move_less_error = 0;\n    int stat_less_error = 0;\n    features_t *model_features;\n\n    // Calculate the number of iterations based on the truncation factor\n    int truncated_model_size = (MODEL_SIZE * loop_truncation_factor) / 100;\n\n    for (int i = 0; i < truncated_model_size; ++i) {\n        model_features = &model->stationary[i];\n\n        // Approximate error calculation using reduced precision\n        int16_t stat_mean_err = (int16_t)(model_features->meanmag - features->meanmag);\n        int16_t stat_sd_err = (int16_t)(model_features->stddevmag - features->stddevmag);\n\n        model_features = &model->moving[i];\n\n        int16_t move_mean_err = (int16_t)(model_features->meanmag - features->meanmag);\n        int16_t move_sd_err = (int16_t)(model_features->stddevmag - features->stddevmag);\n\n        // Use a threshold to decide if one error is significantly larger\n        if (move_mean_err < stat_mean_err - error_threshold) {\n            move_less_error++;\n        } else if (stat_mean_err < move_mean_err - error_threshold) {\n            stat_less_error++;\n        }\n\n        if (move_sd_err < stat_sd_err - error_threshold) {\n            move_less_error++;\n        } else if (stat_sd_err < move_sd_err - error_threshold) {\n            stat_less_error++;\n        }\n\n        // Early termination if one class is already determined to be the winner\n        if (move_less_error > truncated_model_size / 2 || stat_less_error > truncated_model_size / 2) {\n            break;\n        }\n    }\n\n    class_t class = move_less_error > stat_less_error ? CLASS_MOVING : CLASS_STATIONARY;\n    return class;\n}",
        "knobVariables": "['error_threshold', 'loop_truncation_factor']",
        "knobRanges": "[{'error_threshold': [0, 50]}, {'loop_truncation_factor': [50, 100]}]",
        "knobStepSize": "[{'error_threshold': 'Integer'}, {'loop_truncation_factor': 'Integer'}]",
        "filePath": "target/main.c"
    }
]