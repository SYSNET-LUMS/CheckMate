[
    {
        "functionName": "sobel_filtering",
        "completeFunction": "void sobel_filtering() \n    /* Spatial filtering of image data */\n    /* Sobel filter (horizontal differentiation */\n    /* Input: image1[y][x] ---- Output: image2[y][x] */\n{\n    /* Knob Variables Declaration Start */\n    double precision_level = 0.5; // 0.5 for double precision\n    int sample_rate = 1; // Sample every pixel for min/max calculation\n    int kernel_size = 3; // 3 for full kernel, 2 for simplified kernel\n    double normalization_factor = 1.0; // Constant scaling factor for normalization\n    /* Knob Variables Declaration End */\n\n    /* Definition of Sobel filter in horizontal direction */\n    int weight[3][3] = {{ -1,  0,  1 },\n                        { -2,  0,  2 },\n                        { -1,  0,  1 }};\n    double pixel_value; // Changed from double to double\n    double min, max;\n    int x, y, i, j;  /* Loop variable */\n\n    min = FLT_MAX;\n    max = -FLT_MAX;\n\n    // Approximate min/max calculation with truncation\n    for (y = 1; y < (int)(y_size1 - 1)*0.8; y += 1) {\n        for (x = 1; x < (int)(x_size1 - 1)*0.8; x += 1) {\n            pixel_value = 0.0;\n            for (j = -1; j <= 1; j++) {\n                for (i = -1; i <= 1; i++) {\n                    pixel_value += weight[j + 1][i + 1] * (image1[y + j][x + i]);\n                }\n            }\n            if (pixel_value < min) min = pixel_value;\n            if (pixel_value > max) max = pixel_value;\n        }\n    }\n\n    if ((int)(max - min) == 0) {\n        return;\n    }\n\n    /* New loop variables */\n    int xa;\n    int ya;\n    /* New pixel_value */\n    double pixel_value_app; // Changed from double to double\n    /* Initialization of image2[y][x] */\n    x_size2 = x_size1;\n    y_size2 = y_size1;\n    for (ya = 0; (ya < y_size2); ya++) {\n        for (xa = 0; (xa < x_size2); xa++) {\n            image2[ya][xa] = 0;\n        }\n    }\n\n    /* Generation of image2 after linear transformation */\n    for (ya = 1; (ya < (int)(y_size1 - 1)*0.8); ya++) {\n        for (xa = 1; (xa < (int)(x_size1 - 1)*0.8); xa++) {\n            pixel_value_app = 0.0;\n            for (j = -1; j <= 1; j++) {\n                for (i = -1; i <= 1; i++) {\n                    pixel_value_app += weight[j + 1][i + 1] * image1[ya + j][xa + i];\n                }\n            }\n            pixel_value_app = MAX_BRIGHTNESS * (pixel_value_app - min) / (max - min);\n            image2[ya][xa] = (unsigned char)pixel_value_app;\n        }\n    }\n}",
        "knobVariables": "[\"precision_level\", \"sample_rate\", \"kernel_size\", \"normalization_factor\"]",
        "knobRanges": "[{\"precision_level\": [0.5, 1.0]}, {\"sample_rate\": [1, 3]}, {\"kernel_size\": [2, 3]}, {\"normalization_factor\": [0.5, 1.0]}]",
        "knobStepSize": "[{\"precision_level\": \"Real\"}, {\"sample_rate\": \"Integer\"}, {\"kernel_size\": \"Integer\"}, {\"normalization_factor\": \"Real\"}]",
        "filePath": "target/sobel.c"
    }
]