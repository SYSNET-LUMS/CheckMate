[
    {
      "functionName": "classify",
      "completeFunction": "static class_t classify(features_t *features, model_t *model) {\n  /*Knob Variables Declaration Start*/\n  int loop_pruning_factor = 40; //Range: 20 to 100 with Integer search space\n  /*Knob Variables Declaration End*/\n\n  int move_less_error = 0;\n  int stat_less_error = 0;\n  features_t *model_features;\n\n  int new_loop_variable = (MODEL_SIZE*loop_pruning_factor)/100;\n  \n  for (int i = 0; i < new_loop_variable; ++i) {\n    model_features = &model->stationary[i];\n\n    long int stat_mean_err =\n        (model_features->meanmag > features->meanmag)\n            ? (model_features->meanmag - features->meanmag)\n            : (features->meanmag - model_features->meanmag);\n\n    long int stat_sd_err =\n        (model_features->stddevmag > features->stddevmag)\n            ? (model_features->stddevmag - features->stddevmag)\n            : (features->stddevmag - model_features->stddevmag);\n\n    model_features = &model->moving[i];\n\n    long int move_mean_err =\n        (model_features->meanmag > features->meanmag)\n            ? (model_features->meanmag - features->meanmag)\n            : (features->meanmag - model_features->meanmag);\n\n    long int move_sd_err =\n        (model_features->stddevmag > features->stddevmag)\n            ? (model_features->stddevmag - features->stddevmag)\n            : (features->stddevmag - model_features->stddevmag);\n\n    if (move_mean_err < stat_mean_err) {\n      move_less_error++;\n    } else {\n      stat_less_error++;\n    }\n\n    if (move_sd_err < stat_sd_err) {\n      move_less_error++;\n    } else {\n      stat_less_error++;\n    }\n  }\n\n  class_t class =\n      move_less_error > stat_less_error ? CLASS_MOVING : CLASS_STATIONARY;\n  return class;\n}",
      "knobVariables": "['loop_pruning_factor']",
      "knobRanges": "[{'loop_pruning_factor': [40, 100]}]",
      "knobStepSize": "[{'loop_pruning_factor': 'Integer'}]",
      "filePath": "target/main.c"
    }
  ]
  